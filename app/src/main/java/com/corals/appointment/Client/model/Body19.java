/*
 * Corals app
 * Corals openAPI file. Current Develop
 *
 * OpenAPI spec version: 1.0.1
 * Contact: gp2wins-corals@yahoo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.corals.appointment.Client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Body19
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-13T07:13:20.960Z")
public class Body19 {
  @SerializedName("cust_id")
  private String custId = null;

  @SerializedName("deviceid")
  private String deviceid = null;

  @SerializedName("mer_id")
  private String merId = null;

  @SerializedName("notify_instance_id")
  private String notifyInstanceId = null;

  @SerializedName("outlet_id")
  private String outletId = null;

  @SerializedName("redeem")
  private GenerictokengenerateRedeem redeem = null;

  @SerializedName("sessiontoken")
  private String sessiontoken = null;

  /**
   * Gets or Sets tokenPurpose
   */
  @JsonAdapter(TokenPurposeEnum.Adapter.class)
  public enum TokenPurposeEnum {
    T("T"),
    
    P("P");

    private String value;

    TokenPurposeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenPurposeEnum fromValue(String text) {
      for (TokenPurposeEnum b : TokenPurposeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TokenPurposeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenPurposeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenPurposeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TokenPurposeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("token_purpose")
  private TokenPurposeEnum tokenPurpose = null;

  @SerializedName("topup")
  private GenerictokengenerateTopup topup = null;

  public Body19 custId(String custId) {
    this.custId = custId;
    return this;
  }

   /**
   * Get custId
   * @return custId
  **/
    @Schema(description = "")
  public String getCustId() {
    return custId;
  }

  public void setCustId(String custId) {
    this.custId = custId;
  }

  public Body19 deviceid(String deviceid) {
    this.deviceid = deviceid;
    return this;
  }

   /**
   * Get deviceid
   * @return deviceid
  **/
    @Schema(description = "")
  public String getDeviceid() {
    return deviceid;
  }

  public void setDeviceid(String deviceid) {
    this.deviceid = deviceid;
  }

  public Body19 merId(String merId) {
    this.merId = merId;
    return this;
  }

   /**
   * Get merId
   * @return merId
  **/
    @Schema(description = "")
  public String getMerId() {
    return merId;
  }

  public void setMerId(String merId) {
    this.merId = merId;
  }

  public Body19 notifyInstanceId(String notifyInstanceId) {
    this.notifyInstanceId = notifyInstanceId;
    return this;
  }

   /**
   * Get notifyInstanceId
   * @return notifyInstanceId
  **/
    @Schema(description = "")
  public String getNotifyInstanceId() {
    return notifyInstanceId;
  }

  public void setNotifyInstanceId(String notifyInstanceId) {
    this.notifyInstanceId = notifyInstanceId;
  }

  public Body19 outletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

   /**
   * Get outletId
   * @return outletId
  **/
    @Schema(description = "")
  public String getOutletId() {
    return outletId;
  }

  public void setOutletId(String outletId) {
    this.outletId = outletId;
  }

  public Body19 redeem(GenerictokengenerateRedeem redeem) {
    this.redeem = redeem;
    return this;
  }

   /**
   * Get redeem
   * @return redeem
  **/
    @Schema(description = "")
  public GenerictokengenerateRedeem getRedeem() {
    return redeem;
  }

  public void setRedeem(GenerictokengenerateRedeem redeem) {
    this.redeem = redeem;
  }

  public Body19 sessiontoken(String sessiontoken) {
    this.sessiontoken = sessiontoken;
    return this;
  }

   /**
   * Get sessiontoken
   * @return sessiontoken
  **/
    @Schema(description = "")
  public String getSessiontoken() {
    return sessiontoken;
  }

  public void setSessiontoken(String sessiontoken) {
    this.sessiontoken = sessiontoken;
  }

  public Body19 tokenPurpose(TokenPurposeEnum tokenPurpose) {
    this.tokenPurpose = tokenPurpose;
    return this;
  }

   /**
   * Get tokenPurpose
   * @return tokenPurpose
  **/
    @Schema(description = "")
  public TokenPurposeEnum getTokenPurpose() {
    return tokenPurpose;
  }

  public void setTokenPurpose(TokenPurposeEnum tokenPurpose) {
    this.tokenPurpose = tokenPurpose;
  }

  public Body19 topup(GenerictokengenerateTopup topup) {
    this.topup = topup;
    return this;
  }

   /**
   * Get topup
   * @return topup
  **/
    @Schema(description = "")
  public GenerictokengenerateTopup getTopup() {
    return topup;
  }

  public void setTopup(GenerictokengenerateTopup topup) {
    this.topup = topup;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body19 body19 = (Body19) o;
    return Objects.equals(this.custId, body19.custId) &&
        Objects.equals(this.deviceid, body19.deviceid) &&
        Objects.equals(this.merId, body19.merId) &&
        Objects.equals(this.notifyInstanceId, body19.notifyInstanceId) &&
        Objects.equals(this.outletId, body19.outletId) &&
        Objects.equals(this.redeem, body19.redeem) &&
        Objects.equals(this.sessiontoken, body19.sessiontoken) &&
        Objects.equals(this.tokenPurpose, body19.tokenPurpose) &&
        Objects.equals(this.topup, body19.topup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(custId, deviceid, merId, notifyInstanceId, outletId, redeem, sessiontoken, tokenPurpose, topup);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body19 {\n");
    
    sb.append("    custId: ").append(toIndentedString(custId)).append("\n");
    sb.append("    deviceid: ").append(toIndentedString(deviceid)).append("\n");
    sb.append("    merId: ").append(toIndentedString(merId)).append("\n");
    sb.append("    notifyInstanceId: ").append(toIndentedString(notifyInstanceId)).append("\n");
    sb.append("    outletId: ").append(toIndentedString(outletId)).append("\n");
    sb.append("    redeem: ").append(toIndentedString(redeem)).append("\n");
    sb.append("    sessiontoken: ").append(toIndentedString(sessiontoken)).append("\n");
    sb.append("    tokenPurpose: ").append(toIndentedString(tokenPurpose)).append("\n");
    sb.append("    topup: ").append(toIndentedString(topup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

